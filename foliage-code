import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import Dataset, DataLoader
import torchvision
import torchvision.transforms as transforms
import os

# Define the BananaPlantDataset class
class BananaPlantDataset(Dataset):
    def __init__(self, root_dir, transform=None):
        self.root_dir = "C:\Users\juned\OneDrive\Documents\foliage health"
        self.transform = transform
        self.images = []
        self.labels = []
        
        # Load the image files and labels
        for file in os.listdir("C:\Users\juned\OneDrive\Documents\foliage health"):
            if file.endswith('.jpg'):
                image_path = os.path.join(root_dir, file)
                label = 1 if 'healthy' in file else 0  # 1 for healthy, 0 for diseased
                self.images.append(image_path)
                self.labels.append(label)
    
    def __len__(self):
        return len(self.images)
    
    def __getitem__(self, idx):
        image_path = self.images[idx]
        label = self.labels[idx]
        image = torchvision.load_image(image_path)
        
        if self.transform:
            image = self.transform(image)
        
        return image, label

# Define the neural network model
class BananaPlantModel(nn.Module):
    def __init__(self):
        super(BananaPlantModel, self).__init__()
        self.conv1 = nn.Conv2d(3, 6, 5)
        self.pool = nn.MaxPool2d(2, 2)
        self.conv2 = nn.Conv2d(6, 16, 5)
        self.fc1 = nn.Linear(16 * 53 * 53, 120)
        self.fc2 = nn.Linear(120, 84)
        self.fc3 = nn.Linear(84, 2)
    
    def forward(self, x):
        x = self.pool(torch.relu(self.conv1(x)))
        x = self.pool(torch.relu(self.conv2(x)))
        x = x.view(-1, 16 * 53 * 53)
        x = torch.relu(self.fc1(x))
        x = torch.relu(self.fc2(x))
        x = self.fc3(x)
        return x

# Set the hyperparameters
batch_size = 32
num_epochs = 10
learning_rate = 0.001

# Create the dataset and data loader for training and testing
train_root_dir = "C:\Users\juned\OneDrive\Documents\foliage health\training"
test_root_dir = "C:\Users\juned\OneDrive\Documents\foliage health\testing"

transform = transforms.Compose([
    transforms.Resize(256),
    transforms.CenterCrop(224),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
])

train_dataset = BananaPlantDataset(train_root_dir, transform)
test_dataset = BananaPlantDataset(test_root_dir, transform)

train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)
test_loader = DataLoader(test_dataset, batch_size=batch_size, shuffle=False)

# Initialize the model, loss function, and optimizer
model = BananaPlantModel()
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=learning_rate)

# Train the model
for epoch in range(num_epochs):
    running_loss = 0.0
    for i, (images, labels) in enumerate(train_loader):
        images, labels = images.to('cpu'), labels.to('cpu')
        optimizer.zero_grad()
        outputs = model(images)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()
        running_loss += loss.item()
    print(f'Epoch {epoch+1}, Loss: {running_loss / (i+1)}')

# Test the model
model.eval()
test_loss = 0.0
correct = 0
with torch.no_grad():
    for images, labels in test_loader:
        images, labels = images.to('cpu'), labels.to('cpu')
        outputs = model(images)
        loss = criterion(outputs, labels)
        test_loss += loss.item()
        _, predicted = torch.max(outputs, 1)
        correct += (predicted == labels).sum().item()

accuracy = correct / len(test_loader.dataset)
print(f'Test Loss: {test_loss / len(test_loader)}')
print(f'Test Accuracy: {accuracy:.2f}%')
